@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private DotNetObjectReference<App>? _dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var available = await JSRuntime.InvokeAsync<bool>("eval", "typeof window.lukso !== 'undefined'");
                if (available)
                {
                    _dotNetRef = DotNetObjectReference.Create(this);
                    await JSRuntime.InvokeVoidAsync("lukso.registerBlazorInterop", _dotNetRef);
                }
                else
                {
                    Console.WriteLine("⚠️ Not running inside LUKSO Grid — skipping registerBlazorInterop.");
                }
            }
            catch (JSException ex)
            {
                Console.WriteLine("❌ JS error during registerBlazorInterop: " + ex.Message);
            }
        }
    }

    [JSInvokable]
    public Task OnVisitorUpChanged()
    {
        Console.WriteLine("🔄 Visitor UP changed (from JS)");
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnHostUpChanged()
    {
        Console.WriteLine("🔄 Host UP changed (from JS)");
        return Task.CompletedTask;
    }

    public async ValueTask DisposeAsync()
    {
        _dotNetRef?.Dispose();
        await Task.CompletedTask;
    }
}