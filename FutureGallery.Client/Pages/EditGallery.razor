@page "/edit"
@layout MainLayout
@inject ILuksoUPProviderService UPProviderService

<h2 class="rz-text-center rz-mb-4">Edit My Gallery</h2>

<RadzenDropZoneContainer TItem="GalleryItemViewModel"
                         Data="@AllItems"
                         ItemSelector="@ItemSelector"
                         Drop="@OnDrop">
    <ChildContent>
        <div class="edit-zone-wrapper rz-p-4 rz-gap-4 rz-display-flex rz-flex-wrap">
            <div class="zone-box rz-flex-grow-1 rz-border-radius-2 rz-p-3 rz-shadow-md rz-background-color-info-lighter">
                <RadzenText Text="üéØ Selected NFTs (Max 8)" TextStyle="TextStyle.Subtitle2" />
                <RadzenDropZone TItem="GalleryItemViewModel"
                                Value="@( "Selected" )"
                                class="edit-grid rz-mt-2" />
            </div>

            <div class="zone-box rz-flex-grow-1 rz-border-radius-2 rz-p-3 rz-shadow-md rz-background-color-warning-lighter">
                <RadzenText Text="üì¶ Available NFTs" TextStyle="TextStyle.Subtitle2" />
                <RadzenDropZone TItem="GalleryItemViewModel"
                                Value="@( "Available" )"
                                class="edit-grid rz-mt-2" />
            </div>
        </div>
    </ChildContent>

    <Template Context="item">
        <EditGalleryCard Title="@item.Title"
                         Metadata="@item.Metadata"
                         ImageUrl="@item.ImageUrl" />
    </Template>
</RadzenDropZoneContainer>

<div class="rz-mt-4 rz-text-center">
    <RadzenButton Text="üíæ Save Gallery"
                  Click="@SaveGallery"
                  Disabled="@(!SelectedItems.Any())"
                  Style="min-width: 200px;" />
</div>

@code {

    private List<GalleryItemViewModel> AllItems = new();
    private List<GalleryItemViewModel> SelectedItems => AllItems.Where(n => n.Status == "Selected").ToList();

    [Inject] private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await UPProviderService.Initialization;

        try
        {
            var mockIdentifiers = await JS.InvokeAsync<List<GalleryItemIdentifier>>("f030Lukso.loadMockGalleryItems");
            AllItems = mockIdentifiers.ToViewModels();
        }
        catch (JSException jsEx)
        {
            await Console.Error.WriteLineAsync("üö® JS error during UP fetch: " + jsEx.Message);
        }
    }

    private bool ItemSelector(GalleryItemViewModel item, RadzenDropZone<GalleryItemViewModel> zone) =>
        item.Status == (string)zone.Value;

    private void OnDrop(RadzenDropZoneItemEventArgs<GalleryItemViewModel> args)
    {
        if (args.FromZone != args.ToZone)
            args.Item.Status = (string)args.ToZone.Value;

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            AllItems.Remove(args.Item);
            var insertIndex = AllItems.IndexOf(args.ToItem);
            AllItems.Insert(insertIndex, args.Item);
        }
    }

    private async void SaveGallery()
    {
        var items = SelectedItems.Select(nft => new
        {
            tokenContract = "0x1234567890abcdef...", // üîÅ replace with actual logic later
            tokenId = "0x" + Guid.NewGuid().ToString("N").PadRight(64, '0') // üîÅ placeholder
        }).ToList();

        var result = await JS.InvokeAsync<bool>(
            "f030Lukso.saveGallery",
            "0x863382cD5B07e9Cd70f198Dec5D04e4cB90f035c", // ‚úÖ your deployed contract address
            items
        );

        Console.WriteLine(result ? "‚úÖ Gallery saved on-chain!" : "‚ùå Failed to save.");
    }

}