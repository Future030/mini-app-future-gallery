@page "/edit"
@layout MainLayout

<h2 class="rz-text-center rz-mb-4">Edit My Gallery</h2>

<RadzenDropZoneContainer TItem="NftItem"
                         Data="@AllNfts"
                         ItemSelector="@ItemSelector"
                         Drop="@OnDrop">
    <ChildContent>
        <div class="edit-zone-wrapper rz-p-4 rz-gap-4 rz-display-flex rz-flex-wrap">
            <div class="zone-box rz-flex-grow-1 rz-border-radius-2 rz-p-3 rz-shadow-md rz-background-color-info-lighter">
                <RadzenText Text="üéØ Selected NFTs (Max 8)" TextStyle="TextStyle.Subtitle2" />
                <RadzenDropZone TItem="NftItem"
                                Value="@( "Selected" )"
                                class="edit-grid rz-mt-2" />
            </div>

            <div class="zone-box rz-flex-grow-1 rz-border-radius-2 rz-p-3 rz-shadow-md rz-background-color-warning-lighter">
                <RadzenText Text="üì¶ Available NFTs" TextStyle="TextStyle.Subtitle2" />
                <RadzenDropZone TItem="NftItem"
                                Value="@( "Available" )"
                                class="edit-grid rz-mt-2" />
            </div>
        </div>
    </ChildContent>

    <Template Context="item">
        <EditGalleryCard Title="@item.Title"
                         Metadata="@item.Metadata"
                         ImageUrl="@item.ImageUrl" />
    </Template>
</RadzenDropZoneContainer>

<div class="rz-mt-4 rz-text-center">
    <RadzenButton Text="üíæ Save Gallery"
                  Click="@SaveGallery"
                  Disabled="@(!SelectedNfts.Any())"
                  Style="min-width: 200px;" />
</div>

@code {

    private List<NftItem> AllNfts = new()
    {
        new() { Title = "WAVES", Metadata = "Artist: Luma", ImageUrl = "assets/nft1.jpg", LikeCount = 42, Status = "Available" },
        new() { Title = "NEON BLOOM", Metadata = "Artist: Jay", ImageUrl = "assets/nft2.jpg", LikeCount = 12, Status = "Available" },
        new() { Title = "THE DREAMER", Metadata = "Artist: Sora", ImageUrl = "assets/nft3.jpg", LikeCount = 7, Status = "Available" },
        new() { Title = "DARKNET", Metadata = "Artist: Meka", ImageUrl = "assets/nft4.jpg", LikeCount = 66, Status = "Available" },
        new() { Title = "GOLD LEAF", Metadata = "Artist: Arno", ImageUrl = "assets/nft5.jpg", LikeCount = 99, Status = "Available" },
        new() { Title = "CRYPTO BLOOM", Metadata = "Artist: Nyra", ImageUrl = "assets/nft6.jpg", LikeCount = 21, Status = "Available" },
        new() { Title = "PLASMA CORE", Metadata = "Artist: Toshi", ImageUrl = "assets/nft7.jpg", LikeCount = 5, Status = "Available" },
        new() { Title = "GHOST SEASON", Metadata = "Artist: Xone", ImageUrl = "assets/nft8.jpg", LikeCount = 13, Status = "Available" }
    };

    private List<NftItem> SelectedNfts => AllNfts.Where(n => n.Status == "Selected").ToList();

    [Inject] private IJSRuntime JS { get; set; } = default!;
    private string? VisitorUP;
    private string? HostUP;

    protected override async Task OnInitializedAsync()
    {
        await WaitForJsInterop();

        try
        {
            VisitorUP = await JS.InvokeAsync<string>("lukso.getVisitorUP");
            HostUP = await JS.InvokeAsync<string>("lukso.getHostUP");

            Console.WriteLine($"üßë VisitorUP: {VisitorUP}");
            Console.WriteLine($"üè† HostUP: {HostUP}");
        }
        catch (JSException jsEx)
        {
            Console.Error.WriteLine("üö® JS error during UP fetch: " + jsEx.Message);
        }
    }

    private async Task WaitForJsInterop()
    {
        var maxTries = 20;
        var delay = 250;

        for (int i = 0; i < maxTries; i++)
        {
            var luksoAvailable = await JS.InvokeAsync<bool>("eval", "typeof window.lukso !== 'undefined'");
            if (luksoAvailable) return;

            await Task.Delay(delay);
        }

        throw new Exception("‚ö†Ô∏è Timeout waiting for 'lukso' object in JS.");
    }

    private bool ItemSelector(NftItem item, RadzenDropZone<NftItem> zone) =>
        item.Status == (string)zone.Value;

    private void OnDrop(RadzenDropZoneItemEventArgs<NftItem> args)
    {
        if (args.FromZone != args.ToZone)
            args.Item.Status = (string)args.ToZone.Value;

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            AllNfts.Remove(args.Item);
            var insertIndex = AllNfts.IndexOf(args.ToItem);
            AllNfts.Insert(insertIndex, args.Item);
        }
    }

    private void SaveGallery()
    {
        Console.WriteLine("Saving gallery...");
        foreach (var nft in SelectedNfts)
            Console.WriteLine($"- {nft.Title}");
    }

}